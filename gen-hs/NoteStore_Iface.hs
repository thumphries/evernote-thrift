{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.11.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NoteStore_Iface where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T

import qualified UserStore_Types
import qualified Types_Types
import qualified Errors_Types
import qualified Limits_Types


import NoteStore_Types

class NoteStore_Iface a where
  getSyncState :: a -> LT.Text -> P.IO SyncState
  getFilteredSyncChunk :: a -> LT.Text -> I.Int32 -> I.Int32 -> SyncChunkFilter -> P.IO SyncChunk
  getLinkedNotebookSyncState :: a -> LT.Text -> Types_Types.LinkedNotebook -> P.IO SyncState
  getLinkedNotebookSyncChunk :: a -> LT.Text -> Types_Types.LinkedNotebook -> I.Int32 -> I.Int32 -> P.Bool -> P.IO SyncChunk
  listNotebooks :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.Notebook)
  listAccessibleBusinessNotebooks :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.Notebook)
  getNotebook :: a -> LT.Text -> LT.Text -> P.IO Types_Types.Notebook
  getDefaultNotebook :: a -> LT.Text -> P.IO Types_Types.Notebook
  createNotebook :: a -> LT.Text -> Types_Types.Notebook -> P.IO Types_Types.Notebook
  updateNotebook :: a -> LT.Text -> Types_Types.Notebook -> P.IO I.Int32
  expungeNotebook :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  listTags :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.Tag)
  listTagsByNotebook :: a -> LT.Text -> LT.Text -> P.IO (Vector.Vector Types_Types.Tag)
  getTag :: a -> LT.Text -> LT.Text -> P.IO Types_Types.Tag
  createTag :: a -> LT.Text -> Types_Types.Tag -> P.IO Types_Types.Tag
  updateTag :: a -> LT.Text -> Types_Types.Tag -> P.IO I.Int32
  untagAll :: a -> LT.Text -> LT.Text -> P.IO ()
  expungeTag :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  listSearches :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.SavedSearch)
  getSearch :: a -> LT.Text -> LT.Text -> P.IO Types_Types.SavedSearch
  createSearch :: a -> LT.Text -> Types_Types.SavedSearch -> P.IO Types_Types.SavedSearch
  updateSearch :: a -> LT.Text -> Types_Types.SavedSearch -> P.IO I.Int32
  expungeSearch :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  findNoteOffset :: a -> LT.Text -> NoteFilter -> LT.Text -> P.IO I.Int32
  findNotesMetadata :: a -> LT.Text -> NoteFilter -> I.Int32 -> I.Int32 -> NotesMetadataResultSpec -> P.IO NotesMetadataList
  findNoteCounts :: a -> LT.Text -> NoteFilter -> P.Bool -> P.IO NoteCollectionCounts
  getNoteWithResultSpec :: a -> LT.Text -> LT.Text -> NoteResultSpec -> P.IO Types_Types.Note
  getNote :: a -> LT.Text -> LT.Text -> P.Bool -> P.Bool -> P.Bool -> P.Bool -> P.IO Types_Types.Note
  getNoteApplicationData :: a -> LT.Text -> LT.Text -> P.IO Types_Types.LazyMap
  getNoteApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO LT.Text
  setNoteApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> LT.Text -> P.IO I.Int32
  unsetNoteApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO I.Int32
  getNoteContent :: a -> LT.Text -> LT.Text -> P.IO LT.Text
  getNoteSearchText :: a -> LT.Text -> LT.Text -> P.Bool -> P.Bool -> P.IO LT.Text
  getResourceSearchText :: a -> LT.Text -> LT.Text -> P.IO LT.Text
  getNoteTagNames :: a -> LT.Text -> LT.Text -> P.IO (Vector.Vector LT.Text)
  createNote :: a -> LT.Text -> Types_Types.Note -> P.IO Types_Types.Note
  updateNote :: a -> LT.Text -> Types_Types.Note -> P.IO Types_Types.Note
  deleteNote :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  expungeNote :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  copyNote :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO Types_Types.Note
  listNoteVersions :: a -> LT.Text -> LT.Text -> P.IO (Vector.Vector NoteVersionId)
  getNoteVersion :: a -> LT.Text -> LT.Text -> I.Int32 -> P.Bool -> P.Bool -> P.Bool -> P.IO Types_Types.Note
  getResource :: a -> LT.Text -> LT.Text -> P.Bool -> P.Bool -> P.Bool -> P.Bool -> P.IO Types_Types.Resource
  getResourceApplicationData :: a -> LT.Text -> LT.Text -> P.IO Types_Types.LazyMap
  getResourceApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO LT.Text
  setResourceApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> LT.Text -> P.IO I.Int32
  unsetResourceApplicationDataEntry :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO I.Int32
  updateResource :: a -> LT.Text -> Types_Types.Resource -> P.IO I.Int32
  getResourceData :: a -> LT.Text -> LT.Text -> P.IO LBS.ByteString
  getResourceByHash :: a -> LT.Text -> LT.Text -> LBS.ByteString -> P.Bool -> P.Bool -> P.Bool -> P.IO Types_Types.Resource
  getResourceRecognition :: a -> LT.Text -> LT.Text -> P.IO LBS.ByteString
  getResourceAlternateData :: a -> LT.Text -> LT.Text -> P.IO LBS.ByteString
  getResourceAttributes :: a -> LT.Text -> LT.Text -> P.IO Types_Types.ResourceAttributes
  getPublicNotebook :: a -> I.Int32 -> LT.Text -> P.IO Types_Types.Notebook
  shareNotebook :: a -> LT.Text -> Types_Types.SharedNotebook -> LT.Text -> P.IO Types_Types.SharedNotebook
  createOrUpdateNotebookShares :: a -> LT.Text -> NotebookShareTemplate -> P.IO CreateOrUpdateNotebookSharesResult
  updateSharedNotebook :: a -> LT.Text -> Types_Types.SharedNotebook -> P.IO I.Int32
  setNotebookRecipientSettings :: a -> LT.Text -> LT.Text -> Types_Types.NotebookRecipientSettings -> P.IO Types_Types.Notebook
  listSharedNotebooks :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.SharedNotebook)
  createLinkedNotebook :: a -> LT.Text -> Types_Types.LinkedNotebook -> P.IO Types_Types.LinkedNotebook
  updateLinkedNotebook :: a -> LT.Text -> Types_Types.LinkedNotebook -> P.IO I.Int32
  listLinkedNotebooks :: a -> LT.Text -> P.IO (Vector.Vector Types_Types.LinkedNotebook)
  expungeLinkedNotebook :: a -> LT.Text -> LT.Text -> P.IO I.Int32
  authenticateToSharedNotebook :: a -> LT.Text -> LT.Text -> P.IO UserStore_Types.AuthenticationResult
  getSharedNotebookByAuth :: a -> LT.Text -> P.IO Types_Types.SharedNotebook
  emailNote :: a -> LT.Text -> NoteEmailParameters -> P.IO ()
  shareNote :: a -> LT.Text -> LT.Text -> P.IO LT.Text
  stopSharingNote :: a -> LT.Text -> LT.Text -> P.IO ()
  authenticateToSharedNote :: a -> LT.Text -> LT.Text -> LT.Text -> P.IO UserStore_Types.AuthenticationResult
  findRelated :: a -> LT.Text -> RelatedQuery -> RelatedResultSpec -> P.IO RelatedResult
  updateNoteIfUsnMatches :: a -> LT.Text -> Types_Types.Note -> P.IO UpdateNoteIfUsnMatchesResult
  manageNotebookShares :: a -> LT.Text -> ManageNotebookSharesParameters -> P.IO ManageNotebookSharesResult
  getNotebookShares :: a -> LT.Text -> LT.Text -> P.IO ShareRelationships
